#r "Newtonsoft.Json"

using System.Net;
using Dapper;
using System.Data.SqlClient;
using System.Configuration;
using System.Text;
using Newtonsoft.Json;
using System.Web;


public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log)
{
    log.Info("C# HTTP trigger function processed a request.");
    var successful =true;
    string ProductId = req.GetQueryNameValuePairs()
        .FirstOrDefault(q => string.Compare(q.Key, "ProductId", true) == 0)
        .Value;
    if (ProductId == null)
        {
            ProductID id = await req.Content.ReadAsAsync<ProductID>();
            ProductId = id?.ProductId;
        }
    List<Product> products = new List<Product>();
    try
    {
        var cnnString  = ConfigurationManager.ConnectionStrings["SqlConnection"].ConnectionString;
        using(var con = new SqlConnection(cnnString))
        {
            if (ProductId == "0")
            {
                using (SqlCommand cmd = new SqlCommand("select productCode,productDescription,quantityInStock,MSRP from products"))
                {
                    cmd.Connection = con;
                    con.Open();
                    using (SqlDataReader sdr = cmd.ExecuteReader())
                    {
                        if (sdr.HasRows)
                        {
                            while (sdr.Read())
                            {
                                products.Add(new Product()
                                {
                                    ID = sdr["productCode"].ToString(),
                                    Description = sdr["productDescription"].ToString(),
                                    unitsLeft = sdr["quantityInStock"].ToString(),
                                    Price = sdr["MSRP"].ToString()
                                });
                            }
                        }
                    }
                }
            }
            else
            {
                using (SqlCommand cmd = new SqlCommand("SELECT productCode,productDescription,quantityInStock,MSRP from products where productCode = @id"))
                {
                    cmd.Parameters.AddWithValue("@id", ProductId);
                    cmd.Connection = con;
                    con.Open();
                    using (SqlDataReader sdr = cmd.ExecuteReader())
                    {
                        if (sdr.HasRows)
                        {
                            while (sdr.Read())
                            {
                                products.Add(new Product
                                {
                                    ID = sdr["productCode"].ToString(),
                                    Description = sdr["productDescription"].ToString(),
                                    unitsLeft = sdr["quantityInStock"].ToString(),
                                    Price = sdr["MSRP"].ToString()
                                });
                            }
                        }
                    }
                    con.Close();
                }
            }
        }
    }
    catch
    {
        successful=false;
    }
    var jsonToReturn = JsonConvert.SerializeObject(products, Formatting.Indented);
    return !successful
    ? new HttpResponseMessage(HttpStatusCode.BadRequest) {
        Content = new StringContent(JsonConvert.SerializeObject("Please pass some value to get the product details"), Encoding.UTF8, "application/json")
    }
    : new HttpResponseMessage(HttpStatusCode.OK) {
        Content = new StringContent(jsonToReturn, Encoding.UTF8, "application/json")
    };
}

public class ProductID
{
    public string ProductId{get;set;}
}
public class Product
    {
        public string ID { get; set; }
        public string Description { get; set; }
        public string unitsLeft { get; set; }
        public string Price { get; set; }
    }